'use client';

import Link from 'next/link';
import { useEffect, useState } from 'react';

interface Position {
  token0: string;
  token1: string;
  poolAddress: string;
  liquidity: string;
  tickLower: number;
  tickUpper: number;
  currentTick: number;
}

export default function Home() {
  const [positions, setPositions] = useState<Position[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchPositions = async () => {
      try {
        // Replace this with the actual Aerodrome API endpoint
        const response = await fetch('https://api.aerodrome.finance/positions');
        
        if (!response.ok) {
          throw new Error(`API error: ${response.status}`);
        }
        
        const data = await response.json();
        setPositions(data);
        setLoading(false);
      } catch (error) {
        console.error('Error fetching positions:', error);
        setError('Failed to load positions. Please try again later.');
        setLoading(false);
      }
    };

    fetchPositions();
  }, []);

  if (loading) {
    return (
      <main className="min-h-screen p-8">
        <h1 className="text-3xl font-bold mb-6">Your Positions</h1>
        <div className="flex justify-center items-center h-64">
          <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
        </div>
      </main>
    );
  }

  if (error) {
    return (
      <main className="min-h-screen p-8">
        <h1 className="text-3xl font-bold mb-6">Your Positions</h1>
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative" role="alert">
          <strong className="font-bold">Error!</strong>
          <span className="block sm:inline"> {error}</span>
        </div>
      </main>
    );
  }

  return (
    <main className="min-h-screen p-8">
      <h1 className="text-3xl font-bold mb-6">Your Positions</h1>
      {positions.length === 0 ? (
        <div className="bg-yellow-100 border border-yellow-400 text-yellow-700 px-4 py-3 rounded relative" role="alert">
          <strong className="font-bold">No positions found!</strong>
          <span className="block sm:inline"> You don't have any positions yet.</span>
        </div>
      ) : (
        <div className="space-y-4">
          {positions.map((position) => (
            <Link 
              href={`/position/${position.poolAddress}`}
              key={position.poolAddress}
              className="block p-3 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors"
            >
              <div className="flex justify-between items-center">
                <div>
                  <h2 className="text-lg font-semibold">{position.token0}/{position.token1}</h2>
                  <p className="text-sm text-gray-500">Pool: {position.poolAddress}</p>
                </div>
                <div className="text-right">
                  <p className="font-medium">Liquidity: {position.liquidity}</p>
                  <p className="text-sm text-gray-500">Tick Range: {position.tickLower} to {position.tickUpper}</p>
                </div>
              </div>
            </Link>
          ))}
        </div>
      )}
    </main>
  );
}
